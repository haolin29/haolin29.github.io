<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haolin</title>
  <subtitle>Personal Knowledge Management</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haolin29.github.io/"/>
  <updated>2016-07-18T13:33:20.000Z</updated>
  <id>http://haolin29.github.io/</id>
  
  <author>
    <name>Haolin Ju</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>big-data-review</title>
    <link href="http://haolin29.github.io/2016/05/11/big-data-review/"/>
    <id>http://haolin29.github.io/2016/05/11/big-data-review/</id>
    <published>2016-05-11T20:01:10.000Z</published>
    <updated>2016-07-18T13:33:20.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;NYU-Big-Data-Final-Review&quot;&gt;&lt;a href=&quot;#NYU-Big-Data-Final-Review&quot; class=&quot;headerlink&quot; title=&quot;NYU Big Data Final Review&quot;&gt;&lt;/a&gt;NYU Big Data Final Review&lt;/h1&gt;&lt;p&gt;Info for final exam:&lt;/p&gt;
&lt;p&gt;The final exam focuses on post-midterm material mostly, but familiarity with pre-midterm slides and readings will be useful&lt;/p&gt;
&lt;p&gt;You do not need to re-read research papers, but you should re-read the book sections that were assigned since the midterm exam (Except the Facebook case study - it is not on the exam)&lt;/p&gt;
&lt;p&gt;You should review post-midterm slides&lt;/p&gt;
&lt;p&gt;Review the Hive and Impala homework - re-run the commands&lt;/p&gt;
&lt;p&gt;An understanding of the roles of the mapper and reducer is necessary. &lt;/p&gt;
&lt;p&gt;Review your old MapReduce programs, re-run them, read the early chapters with the weather example&lt;/p&gt;
&lt;p&gt;Familiarity with the Wordcount program will be helpful&lt;/p&gt;
&lt;p&gt;There will likely be at least one program to write and/or interpret&lt;/p&gt;
&lt;p&gt;Understand MapReduce 1 architecture - know the major compute components: JobTracker, TaskTrackers&lt;/p&gt;
&lt;p&gt;Understand YARN/MapReduce 2 architecture - know the major compute components: ResourceManager, NodeManager, Application Master&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Understand-how-Hadoop-HDFS-MapReduce-works&quot;&gt;&lt;a href=&quot;#Understand-how-Hadoop-HDFS-MapReduce-works&quot; class=&quot;headerlink&quot; title=&quot;Understand how Hadoop (HDFS + MapReduce) works&quot;&gt;&lt;/a&gt;Understand how Hadoop (HDFS + MapReduce) works&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/95833334/%E5%9B%BE%E5%BA%8A/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202016-05-10%2015.45.05.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The client, which submits the MapReduce job.&lt;/li&gt;
&lt;li&gt;The YARN resource manager, which coordinates the allocation of compute resources on the cluster.&lt;/li&gt;
&lt;li&gt;The YARN node managers,which launch and monitor the compute containers on machines in the cluster.&lt;/li&gt;
&lt;li&gt;The MapReduce application master, which coordinates the tasks running the Map‐ Reduce job. The application master and the MapReduce tasks run in containers that are scheduled by the resource manager and managed by the node managers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Understand-the-4-behaviors-of-Autonomic-Computing&quot;&gt;&lt;a href=&quot;#Understand-the-4-behaviors-of-Autonomic-Computing&quot; class=&quot;headerlink&quot; title=&quot;Understand the 4 behaviors of Autonomic Computing&quot;&gt;&lt;/a&gt;Understand the 4 behaviors of Autonomic Computing&lt;/h2&gt;&lt;p&gt;Self-configuring: all configuration should happen with little or no intervention by the user&lt;/p&gt;
&lt;p&gt;Self-healing: When a progress, service or node stop working, it should repair itself.&lt;/p&gt;
&lt;p&gt;Self-protecting: Continually assess its own health. Redundant, cooperating health checkers can health check each other. &lt;/p&gt;
&lt;p&gt;Self-optimizing: Continually assess its own performance.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;perform load-balanceing operation

request resources to maintain a desired level of performance
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are no Pig programs to write or interpret.&lt;/p&gt;
&lt;p&gt;There are no HBase, Flume, or Zookeeper programs to write, but you should study the slides&lt;/p&gt;
&lt;p&gt;Flume is designed for high-volume ingestion into Hadoop of event-based data. &lt;/p&gt;
&lt;p&gt;There are no Twitter API questions&lt;/p&gt;
&lt;h2 id=&quot;Review-the-Spark-homework-and-slides&quot;&gt;&lt;a href=&quot;#Review-the-Spark-homework-and-slides&quot; class=&quot;headerlink&quot; title=&quot;Review the Spark homework and slides&quot;&gt;&lt;/a&gt;Review the Spark homework and slides&lt;/h2&gt;&lt;p&gt;Spark is a cluster computing system for fast-running analytics.&lt;/p&gt;
&lt;p&gt;Unlike map reduce, spark efficiently handle multi-pass applications.&lt;/p&gt;
&lt;p&gt;RDD = resilient distributed dataset&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hold the data that being processed&lt;/li&gt;
&lt;li&gt;RDDs can store in memory and can persist from query to query&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDDs is not stored with redundancy, but recovery from failure is still possible&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fault tolerance is provided using the linage information tracked by RDD&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RDD can re-build itself using linage information &lt;/p&gt;
&lt;p&gt;  $ file1 = sc.textFile(“myfile.txt”)&lt;br&gt;  $ westLine = file1.filter(lambad line: “West” in line).count()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDD can persist &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using the persist() or cache() method&lt;/li&gt;
&lt;li&gt;to disk&lt;/li&gt;
&lt;li&gt;by replicating it across multiple nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All transformation in spark is lazy transformations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the result is not immediately computed&lt;/li&gt;
&lt;li&gt;when a result need to be returned to the driver program, all transformation are computed - an action trigger the transformation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-Oozie-and-how-does-help&quot;&gt;&lt;a href=&quot;#what-is-Oozie-and-how-does-help&quot; class=&quot;headerlink&quot; title=&quot;what is Oozie and how does help&quot;&gt;&lt;/a&gt;what is Oozie and how does help&lt;/h2&gt;&lt;p&gt;Oozie: workflow in hadoop can be scheduled using oozie, using for hadoop and spark workflow control&lt;/p&gt;
&lt;p&gt;oozie is useful in organizing the processing stage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;launch processing either in parallel or sequentially&lt;/li&gt;
&lt;li&gt;prevent processing step from running until earlier prerequisite steps have completed &lt;/li&gt;
&lt;li&gt;allow map reduce, pig, spark hive etc processing step to be interleaved and run automatically as scripts&lt;/li&gt;
&lt;li&gt;Oozie workflow is captured in an XML file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Be-able-to-explain-what-an-analytic-is&quot;&gt;&lt;a href=&quot;#Be-able-to-explain-what-an-analytic-is&quot; class=&quot;headerlink&quot; title=&quot;Be able to explain what an analytic is&quot;&gt;&lt;/a&gt;Be able to explain what an analytic is&lt;/h2&gt;&lt;p&gt;Discovery and communication of meaningful patterns in data&lt;/p&gt;
&lt;p&gt;Especially valuable in areas rich with recorded information&lt;/p&gt;
&lt;p&gt;Relies on simultaneous application of statistics, computer programming, and operations research&lt;/p&gt;
&lt;p&gt;Analytics often favors data visualization to communicate insight&lt;/p&gt;
&lt;p&gt;define the problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;formulate the problem to be solved then try to find supporting data&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Understand-how-failures-are-detected-handled&quot;&gt;&lt;a href=&quot;#Understand-how-failures-are-detected-handled&quot; class=&quot;headerlink&quot; title=&quot;Understand how failures are detected/handled&quot;&gt;&lt;/a&gt;Understand how failures are detected/handled&lt;/h2&gt;&lt;p&gt;MapReduce 1: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;task failure&lt;ul&gt;
&lt;li&gt;jvm reports, task tracker handle failure&lt;/li&gt;
&lt;li&gt;task tracker notices the lack of update, kill jvm process&lt;/li&gt;
&lt;li&gt;Job tracker notified through task tracker heartbeat message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tasktracker failure&lt;ul&gt;
&lt;li&gt;fails to send heartbeats regularly, job tracker reschedules completed tasks&lt;/li&gt;
&lt;li&gt;a job tracker can blacklist the task tracker if more than four tasks from some job fail&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;job tracker failure: SPOF in MR1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;YARN:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;task failure&lt;ul&gt;
&lt;li&gt;task’s JVM reports error back to parent AM, AM marks as failed and freeing up resources&lt;/li&gt;
&lt;li&gt;JVM exit unexpectedly, NodeManager notices, AM attempt as failed&lt;/li&gt;
&lt;li&gt;AM notices lack of update, NM marks as failed&lt;/li&gt;
&lt;li&gt;AM reschedules execution &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nodemanager failure&lt;ul&gt;
&lt;li&gt;how to detect? fails to send heartbeat regularly, RM will detect&lt;/li&gt;
&lt;li&gt;how to handle? RM remove failed NM from the pool&lt;/li&gt;
&lt;li&gt;if the number of failures for the application is high, an AM can blacklist the NM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;application master failure&lt;ul&gt;
&lt;li&gt;RM detect the failure from heartbeat &lt;/li&gt;
&lt;li&gt;the new AM will use job history to recover state of tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;resource manager failure&lt;ul&gt;
&lt;li&gt;the most serious failure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Understand JVM reuse in MR1 vs. uber tasks in YARN&lt;/p&gt;
&lt;h2 id=&quot;Understand-how-map-reduce-task-progress-is-measured&quot;&gt;&lt;a href=&quot;#Understand-how-map-reduce-task-progress-is-measured&quot; class=&quot;headerlink&quot; title=&quot;Understand how map/reduce task progress is measured&quot;&gt;&lt;/a&gt;Understand how map/reduce task progress is measured&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/95833334/%E5%9B%BE%E5%BA%8A/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202016-05-10%2016.51.37.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Understand Hive, Zookeeper, MapReduce concepts&lt;/p&gt;
&lt;p&gt;Understand advantages/disadvantages of running a Hadoop cluster in a public cloud&lt;/p&gt;
&lt;p&gt;high availability &lt;/p&gt;
&lt;p&gt;HDFS high availability only works if replicas are wisely distributed: but we don’t know the network topology &lt;/p&gt;
&lt;p&gt;Performance&lt;/p&gt;
&lt;p&gt;MapReduce map tasks perform best when co-located with the HDFS block to be processed, or as near as possible to the block if co-location is not an option&lt;/p&gt;
&lt;p&gt;Only if Hadoop co-locates the map task on the same VM with its data block do we know with certainty that the map task is optimally placed in a public cloud&lt;/p&gt;
&lt;p&gt;If the map task cannot be co-located with the data, there is no way to know whether the VM on which the map task will run is in the same server, same rack, or same datacenter as the data block&lt;/p&gt;
&lt;p&gt;Sqoop and Oozie material: Be able to describe the purpose of these tools.&lt;/p&gt;
&lt;p&gt;Sqoop purpose: use sqoop to move data between HDFS and external database, such as mysql&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sqoop import --connect jdbc:mysql://localhost/my_db_name --table my_table&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;NoSQL&lt;/p&gt;
&lt;p&gt;什么是NoSQL？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Non-relational databases&lt;/li&gt;
&lt;li&gt;do not support sql&lt;/li&gt;
&lt;li&gt;do not guarantee acid properties&lt;/li&gt;
&lt;li&gt;designed to be distributed across many nodes&lt;/li&gt;
&lt;li&gt;provide eventual consistency&lt;/li&gt;
&lt;li&gt;easier to scale up than with relational databases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NoSQL database &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;developed to manage large volumes of data that do not necessarily follow a fixed schema&lt;/li&gt;
&lt;li&gt;data is fragmented and stored across many servers&lt;/li&gt;
&lt;li&gt;satisfy realtime constraints is the priority&lt;/li&gt;
&lt;li&gt;joins are not needed, recommendation is that data be de-normalized&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HBase&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a column family is a grouping of columns&lt;/li&gt;
&lt;li&gt;columns that belong to a given columns family are physically stored together&lt;/li&gt;
&lt;li&gt;values are stored in HBase cells&lt;/li&gt;
&lt;li&gt;cells can be versioned: row key + columnFamily:columnName + Timestamp&lt;/li&gt;
&lt;li&gt;region: A subset of an HBase table’s rows starting with a starting row key and exclusive of the ending row key&lt;/li&gt;
&lt;li&gt;read are assisated by the block cache&lt;/li&gt;
&lt;li&gt;write are assisated by the write ahead log, and then to memstore for quick lookup, when the amount of data in memstore reach a threshold, it is flushed to disk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hive&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data warehouse framework&lt;/li&gt;
&lt;li&gt;built on top of map reduce, contrast with HBase, which is built directly on top of HDFS&lt;/li&gt;
&lt;li&gt;user data is organized into tables&lt;/li&gt;
&lt;li&gt;metastore: special table for storing metadata such as table schema&lt;/li&gt;
&lt;li&gt;schema on read&lt;/li&gt;
&lt;li&gt;a hive table is essentially an HDFS directory containing one or more files comprise the table&lt;/li&gt;
&lt;li&gt;don’t support deletes and updates&lt;/li&gt;
&lt;li&gt;parition: divided a table based on the value of a parition column&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;create external table w1 (data1 string, year int, data2 string, temperature int, quality tinyint, data3 string)&amp;#10;          row format delimited fields terminated by &amp;#39;,&amp;#39;&amp;#10;          location &amp;#39;/user/cloudera/hiveInput/&amp;#39;;&amp;#10;&amp;#10;select * from w1 where year &amp;#62; 1949;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ZooKeeper takeaway&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;four behavior of autonomic computing&lt;ul&gt;
&lt;li&gt;self-configuring&lt;/li&gt;
&lt;li&gt;self-healing &lt;/li&gt;
&lt;li&gt;self-protecting&lt;/li&gt;
&lt;li&gt;self-optimizing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;for support high availiabilty&lt;/li&gt;
&lt;li&gt;why we need it?&lt;ul&gt;
&lt;li&gt;to learn status of self and peers&lt;/li&gt;
&lt;li&gt;to obtain reliable and timely information&lt;/li&gt;
&lt;li&gt;simplified user experience&lt;/li&gt;
&lt;li&gt;difficult to identify root cause of the failure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;what is zk?&lt;ul&gt;
&lt;li&gt;hadoop distributed coordination service&lt;/li&gt;
&lt;li&gt;provide tools for simple and safe handling of partial failures&lt;/li&gt;
&lt;li&gt;facilitate loose coupling &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;YARN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uberization mean that the tasks are too small to run in parallel, the AM will run the tasks serially in its own JVM&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NYU-Big-Data-Final-Review&quot;&gt;&lt;a href=&quot;#NYU-Big-Data-Final-Review&quot; class=&quot;headerlink&quot; title=&quot;NYU Big Data Final Review&quot;&gt;&lt;/a&gt;NYU Big Data Final Review&lt;/h1&gt;&lt;p&gt;Info for final exam:&lt;/p&gt;
&lt;p&gt;The final exam focuses on post-midterm material mostly, but familiarity with pre-midterm slides and readings will be useful&lt;/p&gt;
&lt;p&gt;You do not need to re-read research papers, but you should re-read the book sections that were assigned since the midterm exam (Except the Facebook case study - it is not on the exam)&lt;/p&gt;
&lt;p&gt;You should review post-midterm slides&lt;/p&gt;
&lt;p&gt;Review the Hive and Impala homework - re-run the commands&lt;/p&gt;
&lt;p&gt;An understanding of the roles of the mapper and reducer is necessary. &lt;/p&gt;
&lt;p&gt;Review your old MapReduce programs, re-run them, read the early chapters with the weather example&lt;/p&gt;
&lt;p&gt;Familiarity with the Wordcount program will be helpful&lt;/p&gt;
&lt;p&gt;There will likely be at least one program to write and/or interpret&lt;/p&gt;
&lt;p&gt;Understand MapReduce 1 architecture - know the major compute components: JobTracker, TaskTrackers&lt;/p&gt;
&lt;p&gt;Understand YARN/MapReduce 2 architecture - know the major compute components: ResourceManager, NodeManager, Application Master&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>learn and understand react</title>
    <link href="http://haolin29.github.io/2016/03/06/learn-and-understand-react/"/>
    <id>http://haolin29.github.io/2016/03/06/learn-and-understand-react/</id>
    <published>2016-03-06T17:33:54.000Z</published>
    <updated>2016-03-06T21:58:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;初识-React-js&quot;&gt;&lt;a href=&quot;#初识-React-js&quot; class=&quot;headerlink&quot; title=&quot;初识 React.js&quot;&gt;&lt;/a&gt;初识 React.js&lt;/h1&gt;&lt;h2 id=&quot;什么是React？&quot;&gt;&lt;a href=&quot;#什么是React？&quot; class=&quot;headerlink&quot; title=&quot;什么是React？&quot;&gt;&lt;/a&gt;什么是React？&lt;/h2&gt;&lt;p&gt;很多人可能会对这个问题感到困惑。React 其实不是Augular.js 或者 Backbone.js 那样的MVC 框架。 它只是MVC中的V — 也就是表现层， react 只做一件事，这也是符合UNIX的思路。按官网描述，其出发点为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用于开发数据不断变化的大型应用程序（Building large applications with data that changes over time）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;React最初来自Facebook内部的广告系统项目，项目实施过程中前端开发遇到了巨大挑战，代码变得越来越臃肿且混乱不堪，难以维护。于是痛定思痛，他们决定抛开很多所谓的“最佳实践”，重新思考前端界面的构建方式，于是就有了React。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;React的原理&quot;&gt;&lt;a href=&quot;#React的原理&quot; class=&quot;headerlink&quot; title=&quot;React的原理&quot;&gt;&lt;/a&gt;React的原理&lt;/h2&gt;&lt;p&gt;在Web开发中，我们常需要将动态数据实时反映到UI上，这就需要产生对DOM的操作。而复杂和频繁的DOM操作会产生性能瓶颈 (DOM对象本身也是一个js对象，所以严格来说，并不是操作这个对象慢，而是说操作了这个对象后，会触发一些浏览器行为，比如布局和绘制，这些会导致整个文档布局的重新计算）。因此，React引入了 Virtual DOM 的机制：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/95833334/%E5%9B%BE%E5%BA%8A/React/virtual%20dom.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Virtual DOM 是一个模拟 DOM 树的 JavaScript 对象。 React 使用 Virtual DOM 来渲染 UI，当组件状态`state` 有更改的时候，React 会自动调用组件的 `render` 方法重新渲染整个组件的 UI。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么Virtual DOM为什么能加快网页的渲染呢？ &lt;/p&gt;
&lt;p&gt;用React进行开发时所有的DOM构造都是通过虚拟DOM进行，每当数据变化时，React都会重新构建整个DOM树，然后React将当前整个DOM树和上一次的DOM树进行对比，得到DOM结构的区别，然后仅仅将需要变化的部分进行实际的浏览器DOM更新。而且React能够批处理虚拟DOM的刷新，在一个事件循环（Event Loop）内的两次数据变化会被合并，例如你连续的先将节点内容从A变成B，然后又从B变成A，React会认为UI不发生任何变化，而如果通过手动控制，这种逻辑通常是极其复杂的。尽管每一次都需要构造完整的虚拟DOM树，但是因为虚拟DOM是内存数据，性能是极高的，而对实际DOM进行操作的仅仅是Diff部分，因而能达到提高性能的目的。这种算法可以将复杂度从O(n^3)降低到O(n)。&lt;/p&gt;
&lt;p&gt;在以前的静态网页时代，服务器端所要做的就是根据数据Render出HTML送到浏览器端。如果这时因为用户的一个点击需要改变某个状态文字，那么也是通过刷新整个页面来完成的。服务器端并不需要知道是哪一小段HTML发生了变化，而只需要根据数据刷新整个页面。换句话说，任何UI的变化都是通过整体刷新来完成的。而React将这种开发模式以高性能的方式带到了前端，每做一点界面的更新，你都可以认为刷新了整个页面。至于如何进行局部更新以保证性能，则是React框架要完成的事情。&lt;/p&gt;
&lt;p&gt;这种Render模式也带来开发模式的改变，现在你永远只需要关心数据的整体，而两次数据之间的UI该如何变化，则交给React来做。&lt;/p&gt;
&lt;p&gt;下面用一个例子说明这种变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/95833334/%E5%9B%BE%E5%BA%8A/React/render-old.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/95833334/%E5%9B%BE%E5%BA%8A/React/render-react.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;React-编程思想&quot;&gt;&lt;a href=&quot;#React-编程思想&quot; class=&quot;headerlink&quot; title=&quot;React 编程思想&quot;&gt;&lt;/a&gt;React 编程思想&lt;/h2&gt;&lt;p&gt;虚拟DOM不仅带来了简单的UI开发逻辑，同时也带来了组件化开发的思想。所谓组件，即封装起来的具有独立功能的UI部件。React推荐以组件的方式去重新思考UI构成，将UI上每一个功能相对独立的模块定义成组件，然后将小的组件通过组合或者嵌套的方式构成大的组件，最终完成整体UI的构建。&lt;/p&gt;
&lt;p&gt;如果说MVC的思想让你做到视图-数据-控制器的分离，那么组件化的思考方式则是带来了UI功能模块之间的分离。下面通过一个例子来看下MVC和组件化开发思路的区别。&lt;/p&gt;
&lt;p&gt;对于MVC开发模式来说，开发者将三者定义成不同的类，实现了表现，数据，控制的分离，实现松耦合。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.stack.imgur.com/ocEWx.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于React而言，则完全是一个新的思路。功能的角度出发，将UI分成不同的组件，每个组件都独立封装。&lt;/p&gt;
&lt;p&gt;但是你如何知道什么东西应该是独立的组件？只需在你创建一个函数或者对象时，根据是否使用过相同技术来做决定。一种这样的技术是&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单一功能原则（single responsibility principle）&lt;/a&gt;，也就是一个组件在理想情况下只做一件事情。如果它最终增长了，它就应该被分解为更小的组件。&lt;/p&gt;
&lt;p&gt;如果你有一个 JSON 的数据模型给用户，你会发现，如果你的模型构建正确，你的 UI就将映射良好。那是因为 UI 和数据模型趋向于相同的信息架构，只需把 UI 拆分成能准确对应数据模型的每块组件。&lt;/p&gt;
&lt;p&gt;这里借用Reac的Document中的一个例子说明这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://facebook.github.io/react/img/blog/thinking-in-react-components.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这里你会看到，在我们的简单 APP 里有五个组件。斜体表示每个组件的数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;FilterableProductTable (橙色):&lt;/strong&gt; 包含示例的整体&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SearchBar (蓝色):&lt;/strong&gt; 接收所有 &lt;em&gt;用户输入&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProductTable (绿色):&lt;/strong&gt; 基于 &lt;em&gt;用户输入&lt;/em&gt; 显示和过滤 &lt;em&gt;数据集合(data collection)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProductCategoryRow (蓝绿色):&lt;/strong&gt; 为每个 &lt;em&gt;分类&lt;/em&gt; 显示一个列表头&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProductRow (红色):&lt;/strong&gt; 为每个 &lt;em&gt;商品&lt;/em&gt; 显示一行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;既然现在我们已经识别出了我们模型中的组件，让我们把他们安排到一个层级中。在模型中，出现在一个组件里面的另一组件 ，应该在层级中表现为一种子级关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FilterableProductTable&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SearchBar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProductTable&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProductCategoryRow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProductRow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，整个UI是通过一个个小组件组成的大组件，而每个组件只关心自己的逻辑，相互之间是独立的。&lt;/p&gt;
&lt;p&gt;这样最外面的界面只需要render下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ReactDOM.render(&amp;#10;  &amp;#60;FilterableProductTable products=&amp;#123;PRODUCTS&amp;#125; /&amp;#62;,&amp;#10;  document.getElementById(&amp;#39;container&amp;#39;)&amp;#10;);&amp;#10;&amp;#10;// &amp;#123;PRODUCTS&amp;#125; &amp;#26159;&amp;#25968;&amp;#25454;&amp;#28304;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这种方式，每个组件的UI和逻辑都定义在组件内部，和外部完全通过API来交互，通过组合的方式来实现复杂的功能。React认为一个组件应该具有如下特征：&lt;/p&gt;
&lt;p&gt;（1）可组合（Composeable）：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件；&lt;/p&gt;
&lt;p&gt;（2）可重用（Reusable）：每个组件都是具有独立功能的，它可以被使用在多个UI场景；&lt;/p&gt;
&lt;p&gt;（3）可维护（Maintainable）：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护；&lt;/p&gt;
&lt;p&gt;（4）可测试（Testable）：因为每个组件都是独立的，那么对于各个组件分别测试显然要比对于整个UI进行测试容易的多。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;综上所述，React是一个全新思路的前端UI框架，它接管了UI开发中最为复杂的局部更新部分，在在复杂场景下保证高性能。同时，它又引入了组件式的开发思想，从另一个角度来重新审视UI的构成。通过这种方法，不仅能够提高开发效率，而且可以让代码更容易理解，维护和测试。&lt;/p&gt;
&lt;p&gt;React最近将版本号升级到了从0.14直接跳到了15，移动了其中的小数点，这也说明了React的流行度和Facebook对它的自信。相信React及其组件化的开发思路，将会对前端开发这一社区产生更大的影响。我也非常期待React进一步表现和其生态的健康成熟发展。&lt;/p&gt;
&lt;p&gt;@author: Haolin Ju&lt;/p&gt;
&lt;h2 id=&quot;延伸阅读&quot;&gt;&lt;a href=&quot;#延伸阅读&quot; class=&quot;headerlink&quot; title=&quot;延伸阅读&quot;&gt;&lt;/a&gt;延伸阅读&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/react-art-of-simplity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出React（一）：React的设计哲学 - 简单之美&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/react-and-webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出React（二）：React开发神器Webpack&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/react-jsx-and-component&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出React（三）：理解JSX和组件&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/react-dom-diff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出React（四）：虚拟DOM Diff算法解析&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/react-flux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出React（五）：使用Flux搭建React应用程序架构&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/subversion-front-end-ui-development-framework-react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;颠覆式前端UI开发框架：React&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thinking in React&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初识-React-js&quot;&gt;&lt;a href=&quot;#初识-React-js&quot; class=&quot;headerlink&quot; title=&quot;初识 React.js&quot;&gt;&lt;/a&gt;初识 React.js&lt;/h1&gt;&lt;h2 id=&quot;什么是React？&quot;&gt;&lt;a href=&quot;#什么是React？&quot; class=&quot;headerlink&quot; title=&quot;什么是React？&quot;&gt;&lt;/a&gt;什么是React？&lt;/h2&gt;&lt;p&gt;很多人可能会对这个问题感到困惑。React 其实不是Augular.js 或者 Backbone.js 那样的MVC 框架。 它只是MVC中的V — 也就是表现层， react 只做一件事，这也是符合UNIX的思路。按官网描述，其出发点为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用于开发数据不断变化的大型应用程序（Building large applications with data that changes over time）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;React最初来自Facebook内部的广告系统项目，项目实施过程中前端开发遇到了巨大挑战，代码变得越来越臃肿且混乱不堪，难以维护。于是痛定思痛，他们决定抛开很多所谓的“最佳实践”，重新思考前端界面的构建方式，于是就有了React。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://haolin29.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="react" scheme="http://haolin29.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>tmux cheatsheet</title>
    <link href="http://haolin29.github.io/2016/02/28/tmux-cheatsheet/"/>
    <id>http://haolin29.github.io/2016/02/28/tmux-cheatsheet/</id>
    <published>2016-02-29T04:28:24.000Z</published>
    <updated>2016-02-29T04:30:05.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;tmux-cheatsheet&quot;&gt;&lt;a href=&quot;#tmux-cheatsheet&quot; class=&quot;headerlink&quot; title=&quot;tmux cheatsheet&quot;&gt;&lt;/a&gt;tmux cheatsheet&lt;/h1&gt;&lt;h2 id=&quot;新建会话&quot;&gt;&lt;a href=&quot;#新建会话&quot; class=&quot;headerlink&quot; title=&quot;新建会话&quot;&gt;&lt;/a&gt;新建会话&lt;/h2&gt;&lt;p&gt;&lt;code&gt;tmux new -s session-name&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;离开会话&quot;&gt;&lt;a href=&quot;#离开会话&quot; class=&quot;headerlink&quot; title=&quot;离开会话&quot;&gt;&lt;/a&gt;离开会话&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ctrl-a d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;tumx detach&lt;/p&gt;
&lt;h2 id=&quot;接入之前的会话&quot;&gt;&lt;a href=&quot;#接入之前的会话&quot; class=&quot;headerlink&quot; title=&quot;接入之前的会话&quot;&gt;&lt;/a&gt;接入之前的会话&lt;/h2&gt;&lt;p&gt;tmux a&lt;/p&gt;
&lt;p&gt;tumx a -t session-name&lt;/p&gt;
&lt;h2 id=&quot;关闭会话&quot;&gt;&lt;a href=&quot;#关闭会话&quot; class=&quot;headerlink&quot; title=&quot;关闭会话&quot;&gt;&lt;/a&gt;关闭会话&lt;/h2&gt;&lt;p&gt;tumx kill-session -t session-name&lt;/p&gt;
&lt;p&gt;tumx killall 同时关闭tmux&lt;/p&gt;
&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h2&gt;&lt;p&gt;&lt;code&gt;~/.tmxu.conf&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;窗口操作&quot;&gt;&lt;a href=&quot;#窗口操作&quot; class=&quot;headerlink&quot; title=&quot;窗口操作:&quot;&gt;&lt;/a&gt;窗口操作:&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;创建新窗口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;关闭当前窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数字键&lt;/td&gt;
&lt;td&gt;切换到指定窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;切换至上一窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;切换至下一窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;前后窗口间互相切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;td&gt;通过窗口列表切换窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;td&gt;重命名当前窗口，便于识别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;修改当前窗口编号，相当于重新排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;在所有窗口中查找关键词，便于窗口多了切换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;面板操作:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;“&lt;/th&gt;
&lt;th&gt;将当前面板上下分屏&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;将当前面板左右分屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;关闭当前分屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;将当前面板置于新窗口,即新建一个窗口,其中仅包含当前面板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+方向键&lt;/td&gt;
&lt;td&gt;以1个单元格为单位移动边缘以调整当前面板大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+方向键&lt;/td&gt;
&lt;td&gt;以5个单元格为单位移动边缘以调整当前面板大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;空格键&lt;/td&gt;
&lt;td&gt;可以在默认面板布局中切换，试试就知道了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;显示面板编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;td&gt;选择当前窗口中下一个面板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;方向键&lt;/td&gt;
&lt;td&gt;移动光标选择对应面板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{&lt;/td&gt;
&lt;td&gt;向前置换当前面板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;td&gt;向后置换当前面板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+o&lt;/td&gt;
&lt;td&gt;逆时针旋转当前窗口的面板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+o&lt;/td&gt;
&lt;td&gt;顺时针旋转当前窗口的面板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;z&lt;/td&gt;
&lt;td&gt;tmux 1.8新特性，最大化当前所在面板&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tmux-cheatsheet&quot;&gt;&lt;a href=&quot;#tmux-cheatsheet&quot; class=&quot;headerlink&quot; title=&quot;tmux cheatsheet&quot;&gt;&lt;/a&gt;tmux cheatsheet&lt;/h1&gt;&lt;h2 id=&quot;新建会话&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="cheatsheet" scheme="http://haolin29.github.io/categories/cheatsheet/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么开始写博客</title>
    <link href="http://haolin29.github.io/2016/02/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://haolin29.github.io/2016/02/28/为什么开始写博客/</id>
    <published>2016-02-28T16:41:12.000Z</published>
    <updated>2016-02-28T17:07:34.000Z</updated>
    
    <content type="html">&lt;p&gt;受一篇文章启发，决定开始写博客，把自己的想法记录下来，形成知识脉络。&lt;br&gt;文章转载如下：&lt;/p&gt;
&lt;h1 id=&quot;为什么你应该（从现在开始就）写博客&quot;&gt;&lt;a href=&quot;#为什么你应该（从现在开始就）写博客&quot; class=&quot;headerlink&quot; title=&quot;为什么你应该（从现在开始就）写博客&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么你应该（从现在开始就）写博客&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;（一）为什么你应该（从现在开始就）写博客&quot;&gt;&lt;a href=&quot;#（一）为什么你应该（从现在开始就）写博客&quot; class=&quot;headerlink&quot; title=&quot;（一）为什么你应该（从现在开始就）写博客&quot;&gt;&lt;/a&gt;（一）为什么你应该（从现在开始就）写博客&lt;/h2&gt;&lt;p&gt;用一句话来说就是，&lt;strong&gt;写一个博客有很多好处，却没有任何明显的坏处。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让我说得更明确一点：用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。Note：碎碎念不算思考、心情琐记不算思考、唠唠叨叨也不算思考、没话找话也不算思考，请以此类推。&lt;/p&gt;
&lt;p&gt;下面是我个人认为写一个长期的 &lt;strong&gt;价值博客&lt;/strong&gt; 的最大的几点好处：&lt;/p&gt;
&lt;p&gt;1) &lt;strong&gt;能够交到很多志同道合的朋友&lt;/strong&gt;。我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，&lt;strong&gt;因此，和他们即便不打照面，也是心照不宣&lt;/strong&gt;。即便素未谋面也能坐下来就聊得热火朝天。&lt;/p&gt;
&lt;p&gt;为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？很简单，第一，博客无地域限制，整个互联网上从A到B只有一个点击的距离，而传统的建立朋友圈子的方法则受到地域限制。第二，也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“一次表达，无数次阅读”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，用程序员们喜欢听的话来说就是，&lt;strong&gt;“博客极大地增强了话语的复用性”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我曾在CSDN上写了近六年的博客，在一年半前建立了一个Google Groups（TopLanguage），由于我的博客的长期阅读者都是互相有共同语言的，因此这个Group一开始就热火朝天，而高质量的技术讨论则进一步吸引了更多的牛人的参与，雪球滚起来之后，就很难停下来了，将近一年半下来，从这个Group的讨论中我获益良多[1]。而对于非程序员朋友，科学松鼠会则是一个很好的例子。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;2) &lt;a href=&quot;http://mindhacks.cn/2009/02/09/writing-is-better-thinking/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;书写是为了更好的思考&lt;/a&gt;。我在《书写是为了更好的思考》里面详细总结了书写的好处，这里就不拷贝粘贴了。有些想法如果不写下来，也就忘掉了，有一个广为流传的《数学牛人们的轶事》（荣耀属于ukim）里面讲了希尔伯特的一个故事：一次在Hilbert的讨论班上，一个年轻人报告，其中用了一个很漂亮的定理，Hilbert说“这真是一个妙不可言（wunderbaschon）的定理呀,是谁发现的？”那个年轻人茫然的站了很久，对Hilbert说：“是你.……”。&lt;/p&gt;
&lt;p&gt;3) &lt;strong&gt;“教”是最好的“学”&lt;/strong&gt;。如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。&lt;/p&gt;
&lt;p&gt;为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中整个的知识体系来个寻根究底，把藏在水面之下的那些东西统统挖出来，把大脑中的那些我们知道、但不知道自己知道的潜在概念或假设（assumptions）都挖出来，把它们从内隐记忆拉扯到外显记忆中。因为只有完全知道、并知道自己知道一切来龙去脉的人，才能真正把一件事情讲得通通透透。&lt;/p&gt;
&lt;p&gt;但是，你可能会怀疑，那除了能够讲清楚之外，弄清自己到底知道哪些东西还有其他什么好处吗？如果没有其他好处，那我又何必费这个劲呢？我又不当老师。&lt;/p&gt;
&lt;p&gt;TopLanguage上的一位朋友sagasw曾经讲了这样一个小故事：据说在某个著名软件公司里，开发组的桌上会放着一只小熊，大家互相问问题之前，先对着小熊把问题说一遍，看能不能把问题描述的清晰，基本上说的比较有条理以后，答案也就随之而来了。当然，你不一定要对小熊说，你可以在大脑中虚构一个听众，一个不懂行的听众，然后你说给他听。这是可行的，我经常在路上用。不过如果你能坐下来，我建议你还是说给实际的听众听——即写下你的思考，因为书写是更好的思考。&lt;/p&gt;
&lt;p&gt;我们的绝大多数知识在绝大多数时候都隐藏在潜意识中，其实我们意识的窗口很小，我们的工作记忆只能容纳寥寥数个条目（记得那个“看你能够记住屏幕上同时闪现的多少个数字”的flash小游戏吗？），我们平时所作的推理过程很大部分都是自动的，发生在潜意识中，而我们只能感知到一些中间结论。不信你回忆一下你在和别人讨论问题的时候有多少次觉得“反正就是这样，我感觉得到它是对的，但是你问我，我也说不清到底怎么回事”，对此你不觉得很奇怪吗？如果你都不能从逻辑上支持你的结论，你怎么就能确信它是对的呢？仅仅因为你的直觉强烈地告诉你它是对的？那如果旁边有另一个人，他和你持相反的观念，而他的直觉也强烈地告诉他他是对的。这时候你又怎么想？“他的直觉错了，我的直觉是对的”？难道你这么自信你的直觉是世界上最可靠的？&lt;/p&gt;
&lt;p&gt;我自己则是非常珍惜类似这样的机会，即当“我强烈地觉得它是对的，但我却说不出所以然来”，这时候往往是到大脑中翻箱倒柜的时候，弄清来龙去脉的时候，深入反思的时候，纠正一直以来错误的潜在前提假设的时候。另一方面，“我强烈地觉得这个说法有问题，但我却说不清它为什么有问题，到底哪有问题”，这也是一个极有意义的瞬间，它几乎总是意味着你对一个问题的认识有潜在的偏差，肯定是在你自己都没有觉知到的地方引入了一个潜在的假设、偷换了一个重要的概念，等等。而这种时候就是深入反思的时候，当你终于潜到问题的底层，触摸到问题的实质，把水面之下的冰山整体看清了的时候你会有一种通体舒泰的感觉。&lt;/p&gt;
&lt;p&gt;为什么说以上这些？因为刚才说的是你必须等待这样的反思机会，但如果你选择经常总结自己的知识体系，并说出来给你的读者听，你就会发现你自己创造了这样的机会。如果我们平时不反思，我们觉得很多事情都是当然的，但结果如果要你一开口说给别人听，常常会发现事情就开始变得不那么明显了，你说着说着，就开始莫名其妙地发现自己需要用到“反正”这个词了。&lt;/p&gt;
&lt;p&gt;于是，反思的机会就来了。&lt;/p&gt;
&lt;p&gt;一旦你把自己潜意识里面的东西从幕后拉出来，你就有了面对并反思它们的可能，而不是任它们在幕后阴险地左右你的思维。很多时候我们的思路出了问题并不是我们不会反思，而是不知道自己的思维中有那些隐含的假设（assumptions），如果你只感觉到答案，却不知道你大脑得到这个答案之前做了哪些推理，你又怎么知道哪一环可能出了问题呢？另一方面，一旦你弄清了自己到底是怎么想的，离意识到问题就不远了，很简单的道理——如果别人和你争辩的时候总是只摆立场，你就很难和他辩，但如果他把自己的推理过程原原本本暴露给你，批判起来总是容易得多的。（也正因为这个原因有很多人总是把逻辑藏在背后，不敢暴露出来）&lt;/p&gt;
&lt;p&gt;绝大多数时候其实我们都会不假思索地得出一些结论，就像上了发条的自动机，但其实我们并不知道这些结论到底怎么来的，在思维的背后到底发生了哪些事情，故而当我们发现我们的结论错了的时候，一头雾水，没法着手寻找到底在哪错了。如果你注意一下很多人的发言（论坛、博客等等），如果你把他们的发言分为“前提”、“假设”、“逻辑”、“结论”这四个部分，你会发现一大堆人只会不停地下结论，摆立场，却见不到这些结论或离场的前提、假设和个中逻辑，倒也不是他们不愿意写出逻辑，而是因为反思自己的思维过程实在是一件困难非常的事情，我们的推理过程很大一部分发生在意识的水面之下，只有当有了重要结论的时候这条逻辑链才会浮出来冒一个泡，让我们的意识捕捉到。更何况绝大多数时候我们用的其实并不是完整严密的逻辑思维，而是思维捷径。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;去教一个完全不懂的人，则是一种最最强大和彻底的反思途径——因为他没有任何预备的知识&lt;/strong&gt;，所以要让他弄懂你所知道的，你就必须彻底反思你的知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的，你不能自己站在11层上，然后假设你的读者站在第10层，指望着只要告诉他第11层有那些内容就让他明白。你的读者站在第一层，你必须知道你脚下踩着的另外10层到底是怎么构造的。这就迫使你对你所掌握的、或之前认为正确的那些东西作彻彻底底的、深刻的反思，你的受众越是不懂，你需要反思得就越深刻。&lt;/p&gt;
&lt;p&gt;4) &lt;strong&gt;讨论是绝佳的反思。&lt;/strong&gt;另一方面，很多时候我们并不是有机会说给完全不懂的人听，更大的可能性是说给同领域有一定基础的人听，这个时候并不代表就不能促使反思了，实际上，你会发现，如果你公开你的想法，几乎总能看到与你持不同意见的人，然后你通过比较你和他的观念之间的差别，会发现你们在一开始的思路上就存在差异，差异从哪里来的？在进一步讨论中你们就会不断地迫使对方拿出更深层次的理由，这同样也是一种非常有效地促使自己反思的方法，在讨论的过程中双方的理由自然会变得越来越深入，越来越接近问题的本质，一些平时难以注意到的深层面的差异性就会逐渐浮现出来，你也就多了一次难得的机会去审视自己的思维中到底存放了哪些错误的信息。&lt;/p&gt;
&lt;p&gt;5) &lt;strong&gt;激励你去持续学习和思考&lt;/strong&gt;。如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…&lt;/p&gt;
&lt;p&gt;为了打破这个死循环，不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情。&lt;/p&gt;
&lt;p&gt;为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻、独到的见解。这看起来有点本末倒置，但很快本和末就会正过来。&lt;/p&gt;
&lt;p&gt;6) &lt;strong&gt;学会持之以恒地做一件事情&lt;/strong&gt;。很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造 &lt;strong&gt;流体验&lt;/strong&gt; 的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。&lt;/p&gt;
&lt;p&gt;7) 一个长期的价值博客是一份很好的简历。这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到价值博客的时代，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso这样的博客，个人的影响力已经足以支撑出一份事业（牛博和5gme），但至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛… 这是一个良性循环。&lt;/p&gt;
&lt;h2 id=&quot;（二）怎么做到长期写一个价值博客&quot;&gt;&lt;a href=&quot;#（二）怎么做到长期写一个价值博客&quot; class=&quot;headerlink&quot; title=&quot;（二）怎么做到长期写一个价值博客&quot;&gt;&lt;/a&gt;（二）怎么做到长期写一个价值博客&lt;/h2&gt;&lt;p&gt;注意到我并没有说“怎么做到长期坚持写一个价值博客”，因为当思考和总结成为习惯之后，诉诸文字以及借助书写来进一步思考就变成了一件自然而然的事情，就变成了一件“因为你在思考和总结从而必须书写下来”的事情，博客就变成了副产品。&lt;/p&gt;
&lt;p&gt;一开始的时候你是因为要写博客而去使劲地思考和总结，指望给出令人眼睛一亮的东西，到了后来，就变成了因为你习惯了思考和总结，因为你意识到书写是更好的思考，你就必须使你的想法成为文字。至此本和末就会各归原位，不再颠倒。&lt;/p&gt;
&lt;p&gt;怎样做到长期写一个价值博客？也许有人会给出很多有趣有用的小技巧来提供动机和激励，譬如如何做SEO，如何鼓励读者留言等等，但是这些我都不想说，我只想说最最重要的，那就是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就像那句经常被人传阅的话：只做你最感兴趣的事情，钱会随之而来[2]。&lt;/p&gt;
&lt;p&gt;这方面的具体例子大家可以留意一下，随处可见，就不一一举了。我想再重复一下的是，千万不要碎碎念，我能理解每个人都想偶尔发发牢骚的冲动，但是现在已经有了一个很好的窗口：twitter，所以立即停止在你的博客上碎碎念，阅读博客的人希望得到信息而非噪音。如果实在忍不住想碎碎念的话不妨换一下位置，这么来告诉自己：如果你看到别人博客来上这么一段，你会有兴趣看吗？&lt;/p&gt;
&lt;h2 id=&quot;（三）可能出现的问题以及怎样应付&quot;&gt;&lt;a href=&quot;#（三）可能出现的问题以及怎样应付&quot; class=&quot;headerlink&quot; title=&quot;（三）可能出现的问题以及怎样应付&quot;&gt;&lt;/a&gt;（三）可能出现的问题以及怎样应付&lt;/h2&gt;&lt;p&gt;即便上文给出了N条写博客的理由，但有时候只要一条不写的理由就会让人停止做一件事情。所以我特别加上一节“可能出现的问题以及怎样应付”，《影响力2》[3]第五章雄辩地证明，&lt;strong&gt;“Much of Will is Skill”，意志力很大程度上来源于有正确的方法，而非天生。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) 担心别人认为没有价值。&lt;/strong&gt;事实是，你面临过的问题总会有人面临过，你独立思考了，别人没有，你的文章对他们就会有价值。当然，肯定会对某些人没有价值，他们早就知道了，但就算你再厉害，也总是有人比你厉害的，不能说因为这些原因就不记录你自己的想法了，你自己思考了之后理解得最深刻，就算有别人想过了，总有人没有想到的。况且，思考成了习惯，你的思考能力也会越来越强，你的文章也会越来越有价值。重复，无论你面临什么困惑，总会有很多人同样面临过，于是你苦苦思索之后的结果，肯定会对很多人有意义。&lt;/p&gt;
&lt;p&gt;或者，你想通了之后觉得其实也很简单于是不愿意或者不好意思写了，但要知道，问题在想通了之后总是简单的，问题的困难程度不在于想通了之后还觉得有多难，而在于从你觉得它难到你觉得它简单需要耗费多少思维体力，你耗费的时间越长，说明有越多的人最终还是没有想明白（路越长走到底的人越少）。&lt;/p&gt;
&lt;p&gt;最后，虽然我现在看一年前的文章觉得挺不成熟，但是如果没有那些不成熟的思考，也不会有现在更成熟的思考，我几年后来看现在写的东西，还是会觉得不成熟。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) 担心想法太幼稚或有漏洞等等被别人笑话。&lt;/strong&gt;人非圣贤。正是因为单个人的想法总是有漏洞，才值得拿出来交流（《书写是更好的思考》，讨论是绝佳的反思），被别人指出问题正是改进的空间，藏着掖着的想法永远不可能变得更成熟。&lt;/p&gt;
&lt;p&gt;Much of intelligence is knowledge，有这么一个非常发人深省的经典心理学实验[4]：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将孩子们分成两组，通过给他们不同的阅读材料让一组相信智力是天生的，不可在后天改变的，另一组则让他们相信智力其实只是知识和技能的代名词，完全是后天习得的。接下来让他们做一组任务，那些被相信智力天生说的孩子，倾向于回避困难的任务，选择较容易的任务，这里的逻辑想必是这样的：如果做困难的任务，就增大了失败的几率，就在降低了自己在别人和自己心目中的智力的值。为了保护这个智力的值不被降低，应该避免那些有失败风险的项目。而另一组孩子则对于有挑战性的事情跃跃欲试，并且在失败的时候明显没有前者沮丧，因为失败也是学得新的东西，不管怎样都是“智力”的提高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;况且，只会批判乃至嘲笑别人的人是最不知道怎么建设的人，忽略他们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3) 得不到激励。&lt;/strong&gt;这其实是个最无聊的问题了，只有写碎碎念的博客才会面对“激励”的问题。如果写自己的总结，写自己独立的思考，那么书写下来、理解通透，本身就是一个极大的激励。就算放在自己的私密笔记本里面也一样有成就感。况且，如果你真做到了书写价值博客，那么绝对不用担心你的观点得不到传播，也许一开始会耗时长一点，但是这在任何事情上都是必要的初始阶段，Gmail小组的核心人物、FriendFeed创始人Paul Buchheit，和编程界名博Coding Horror的博主Jeff Atwood都曾经感叹过：Overnight success takes a long time （(1)，(2)），不过对于价值博客来说，现在网络上的聚合类服务这么多，机器的、人肉的、半人肉的都有，情况又要好得多了，而且我相信情况还会越来越好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4) 写不出来。&lt;/strong&gt;这个问题也比较无聊，思考本不是一件急于求成的事情。长期订阅我的博客的朋友知道我一般发文频率在一个月三五篇，实际上有不少次我个把月也不发布文章，原因很简单，要么是有手头的事情要处理思考的时间被压缩了，要么是遇到比较大或者比较困难的问题需要长时间的思考和积淀，没有关系，如果没有想清楚就再想想，爱思考的人和不爱思考的人有一个本质的区别，前者在生活中总是挂着几个问题在大脑中，它们时常都会冒出来骚扰你一下，让你琢磨琢磨，不爱思考的则是没事不主动想问题，遇到问题还要先想想是否能找捷径（找人帮忙）解决。&lt;/p&gt;
&lt;p&gt;无论如何，不用急于求成，在一个主题上深入下去思考，总能挖到别人挖不到的角落。你能让一个问题在大脑中停留的时间越长，就越是能够发现新的东西，一般来说，我认为有价值的问题我会让他在意识或潜意识中待短则一个星期，长则一个月（视问题大小而定），利用走路吃饭的时间琢磨（我发现很多我佩服的人也都有这个习惯），有时即便已经想通了写下来了发出去了，大脑仍然还是会在回味问题，还没有把它撤出潜意识，然后看到某篇文章或某本书的时候忽然又有所新的感悟。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;能够把问题长时间停靠在潜意识中是一种技能，能够带来很大的好处，停留得越长你越琢磨得透彻，比别人看到的就越多。&lt;/strong&gt; 我们必须要带着问题的眼镜看待事物才能发现新的视角，否则就会出现视而不见效应，别的不说，广为人知的例子是阿基米德的“尤里卡！”，如果不是长时间琢磨着一个问题，一直把它放在思维中，是不会从洗澡领悟到“排水测体积”的，否则他洗了那么多年澡怎么不早发现呢？[5]&lt;/p&gt;
&lt;p&gt;所以，如果你习惯了思考问题，就总会有东西写，先有思考，然后有总结，然后在总结中进一步思考。&lt;/p&gt;
&lt;p&gt;当然你也可以试试把不成熟的想法写下来，试图整理成条理清晰的文字，然后看看能否在整理的过程中走得更远。这往往是可行的。比如这篇文章在我的简记里面原本其实只有三行字（包含大约十来个备忘关键词），而最初在我的大脑里面其实只有一个走路时冒出来的问题——为什么要写博客？&lt;/p&gt;
&lt;p&gt;–&lt;/p&gt;
&lt;p&gt;[1] 你可以看一下我收藏的一些精彩主题。&lt;/p&gt;
&lt;p&gt;[2] 尽管我并不完全同意这句话本身，但它这种解决问题链上更基本环节的问题的精神是我赞同的。&lt;/p&gt;
&lt;p&gt;[3] 《影响力2》这个名字起得很聪明，其实它并不是《影响力》的作者写的。&lt;/p&gt;
&lt;p&gt;[4] 我忘了这则实验的出处了，但实验的精神是记忆犹新的，哪位同学记得原始出处的麻烦提醒我一下。&lt;/p&gt;
&lt;p&gt;[5] 对于阿基米德这个故事的真实性是有争议的，毕竟几千年久远的事情谁弄得清呢。但是故事的道理是很本质的，我们平时也经常有类似的体验，加上阿基米德的“尤里卡”实在太出名了，所以我相信用用无妨。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;受一篇文章启发，决定开始写博客，把自己的想法记录下来，形成知识脉络。&lt;br&gt;文章转载如下：&lt;/p&gt;
&lt;h1 id=&quot;为什么你应该（从现在开始就）写博客&quot;&gt;&lt;a href=&quot;#为什么你应该（从现在开始就）写博客&quot; class=&quot;headerlink&quot; title=&quot;为什么你应该（从现在开始就）写博客&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/&quot;&gt;为什么你应该（从现在开始就）写博客&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;（一）为什么你应该（从现在开始就）写博客&quot;&gt;&lt;a href=&quot;#（一）为什么你应该（从现在开始就）写博客&quot; class=&quot;headerlink&quot; title=&quot;（一）为什么你应该（从现在开始就）写博客&quot;&gt;&lt;/a&gt;（一）为什么你应该（从现在开始就）写博客&lt;/h2&gt;&lt;p&gt;用一句话来说就是，&lt;strong&gt;写一个博客有很多好处，却没有任何明显的坏处。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让我说得更明确一点：用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。Note：碎碎念不算思考、心情琐记不算思考、唠唠叨叨也不算思考、没话找话也不算思考，请以此类推。&lt;/p&gt;
&lt;p&gt;下面是我个人认为写一个长期的 &lt;strong&gt;价值博客&lt;/strong&gt; 的最大的几点好处：&lt;/p&gt;
&lt;p&gt;1) &lt;strong&gt;能够交到很多志同道合的朋友&lt;/strong&gt;。我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，&lt;strong&gt;因此，和他们即便不打照面，也是心照不宣&lt;/strong&gt;。即便素未谋面也能坐下来就聊得热火朝天。&lt;/p&gt;
&lt;p&gt;为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？很简单，第一，博客无地域限制，整个互联网上从A到B只有一个点击的距离，而传统的建立朋友圈子的方法则受到地域限制。第二，也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“一次表达，无数次阅读”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，用程序员们喜欢听的话来说就是，&lt;strong&gt;“博客极大地增强了话语的复用性”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我曾在CSDN上写了近六年的博客，在一年半前建立了一个Google Groups（TopLanguage），由于我的博客的长期阅读者都是互相有共同语言的，因此这个Group一开始就热火朝天，而高质量的技术讨论则进一步吸引了更多的牛人的参与，雪球滚起来之后，就很难停下来了，将近一年半下来，从这个Group的讨论中我获益良多[1]。而对于非程序员朋友，科学松鼠会则是一个很好的例子。&lt;/p&gt;
    
    </summary>
    
      <category term="想法" scheme="http://haolin29.github.io/categories/idea/"/>
    
    
  </entry>
  
  <entry>
    <title>docker 学习笔记</title>
    <link href="http://haolin29.github.io/2016/02/27/docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://haolin29.github.io/2016/02/27/docker-学习笔记/</id>
    <published>2016-02-28T04:59:08.000Z</published>
    <updated>2016-02-28T05:01:29.000Z</updated>
    
    <content type="html">&lt;p&gt;docker用namespace来隔离每个container&lt;/p&gt;
&lt;p&gt;cgroup: docker use group to achieve resource limiting&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/95833334/%E5%9B%BE%E5%BA%8A/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202016-02-27%2017.12.56.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/95833334/%E5%9B%BE%E5%BA%8A/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202016-02-27%2017.37.13.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;docker用namespace来隔离每个container&lt;/p&gt;
&lt;p&gt;cgroup: docker use group to achieve resource limiting&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/95833334/%E5%9B%BE%E5%BA%8A/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202016-02-27%2017.12.56.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/95833334/%E5%9B%BE%E5%BA%8A/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202016-02-27%2017.37.13.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
